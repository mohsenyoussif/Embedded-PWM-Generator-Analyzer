
Software_ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000019ee  00001a82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800080  00800080  00001aa2  2**0
                  ALLOC
  3 .stab         00001b60  00000000  00000000  00001aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e4a  00000000  00000000  00003604  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000444e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000458e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000046fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006347  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007232  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008140  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000083cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008b9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6d 0c 	call	0x18da	; 0x18da <main>
      8a:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 be 0c 	jmp	0x197c	; 0x197c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 be 0c 	jmp	0x197c	; 0x197c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidInit>:
#include "CLCD_interface.h"
#include "CLCD_private.h"

/*8bit initialization*/
void CLCD_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 e2       	ldi	r26, 0x20	; 32
     b60:	b2 e4       	ldi	r27, 0x42	; 66
     b62:	8b 87       	std	Y+11, r24	; 0x0b
     b64:	9c 87       	std	Y+12, r25	; 0x0c
     b66:	ad 87       	std	Y+13, r26	; 0x0d
     b68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b70:	9e 85       	ldd	r25, Y+14	; 0x0e
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	4a ef       	ldi	r20, 0xFA	; 250
     b78:	54 e4       	ldi	r21, 0x44	; 68
     b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b7e:	dc 01       	movw	r26, r24
     b80:	cb 01       	movw	r24, r22
     b82:	8f 83       	std	Y+7, r24	; 0x07
     b84:	98 87       	std	Y+8, r25	; 0x08
     b86:	a9 87       	std	Y+9, r26	; 0x09
     b88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b8a:	6f 81       	ldd	r22, Y+7	; 0x07
     b8c:	78 85       	ldd	r23, Y+8	; 0x08
     b8e:	89 85       	ldd	r24, Y+9	; 0x09
     b90:	9a 85       	ldd	r25, Y+10	; 0x0a
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	40 e8       	ldi	r20, 0x80	; 128
     b98:	5f e3       	ldi	r21, 0x3F	; 63
     b9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     b9e:	88 23       	and	r24, r24
     ba0:	2c f4       	brge	.+10     	; 0xbac <CLCD_voidInit+0x66>
		__ticks = 1;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	9e 83       	std	Y+6, r25	; 0x06
     ba8:	8d 83       	std	Y+5, r24	; 0x05
     baa:	3f c0       	rjmp	.+126    	; 0xc2a <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     bac:	6f 81       	ldd	r22, Y+7	; 0x07
     bae:	78 85       	ldd	r23, Y+8	; 0x08
     bb0:	89 85       	ldd	r24, Y+9	; 0x09
     bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	3f ef       	ldi	r19, 0xFF	; 255
     bb8:	4f e7       	ldi	r20, 0x7F	; 127
     bba:	57 e4       	ldi	r21, 0x47	; 71
     bbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bc0:	18 16       	cp	r1, r24
     bc2:	4c f5       	brge	.+82     	; 0xc16 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bca:	9e 85       	ldd	r25, Y+14	; 0x0e
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e2       	ldi	r20, 0x20	; 32
     bd2:	51 e4       	ldi	r21, 0x41	; 65
     bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	bc 01       	movw	r22, r24
     bde:	cd 01       	movw	r24, r26
     be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	9e 83       	std	Y+6, r25	; 0x06
     bea:	8d 83       	std	Y+5, r24	; 0x05
     bec:	0f c0       	rjmp	.+30     	; 0xc0c <CLCD_voidInit+0xc6>
     bee:	88 ec       	ldi	r24, 0xC8	; 200
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	9c 83       	std	Y+4, r25	; 0x04
     bf4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	f1 f7       	brne	.-4      	; 0xbfa <CLCD_voidInit+0xb4>
     bfe:	9c 83       	std	Y+4, r25	; 0x04
     c00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c02:	8d 81       	ldd	r24, Y+5	; 0x05
     c04:	9e 81       	ldd	r25, Y+6	; 0x06
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	00 97       	sbiw	r24, 0x00	; 0
     c12:	69 f7       	brne	.-38     	; 0xbee <CLCD_voidInit+0xa8>
     c14:	14 c0       	rjmp	.+40     	; 0xc3e <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c16:	6f 81       	ldd	r22, Y+7	; 0x07
     c18:	78 85       	ldd	r23, Y+8	; 0x08
     c1a:	89 85       	ldd	r24, Y+9	; 0x09
     c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	9e 83       	std	Y+6, r25	; 0x06
     c28:	8d 83       	std	Y+5, r24	; 0x05
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	9a 83       	std	Y+2, r25	; 0x02
     c30:	89 83       	std	Y+1, r24	; 0x01
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	9a 81       	ldd	r25, Y+2	; 0x02
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <CLCD_voidInit+0xf0>
     c3a:	9a 83       	std	Y+2, r25	; 0x02
     c3c:	89 83       	std	Y+1, r24	; 0x01
	 *N--> NO of lines which I want to write (0-->1 line or 1-->2 lines)
	 *F-->Font size       5*8 or 5*11 including cursor    (0-->5*8   1--> 5*11)
	 *
	 *Function set command:  2 Lines    5*8 Font size */

	CLCD_voidSendCommand(0b00111000);
     c3e:	88 e3       	ldi	r24, 0x38	; 56
     c40:	0e 94 31 06 	call	0xc62	; 0xc62 <CLCD_voidSendCommand>
	 *
	 *D = 1    Display(screen) enable
	 *C =0    cursor disable
	 *B=0     no blink cursor        */

	CLCD_voidSendCommand(0b00001100);
     c44:	8c e0       	ldi	r24, 0x0C	; 12
     c46:	0e 94 31 06 	call	0xc62	; 0xc62 <CLCD_voidSendCommand>

	/*clear Display */
	CLCD_voidSendCommand(1);
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	0e 94 31 06 	call	0xc62	; 0xc62 <CLCD_voidSendCommand>


}
     c50:	2e 96       	adiw	r28, 0x0e	; 14
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <CLCD_voidSendCommand>:
/* This function used to send command to LCD */
void CLCD_voidSendCommand(uint8 copy_uint8Command)
{
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	2f 97       	sbiw	r28, 0x0f	; 15
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to low to send command */
	DIO_uint8SetPinValue(CLCD_CTR_PORT,CLCD_RS_PIN,DIO_uint8PIN_LOW);
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	0e 94 55 08 	call	0x10aa	; 0x10aa <DIO_uint8SetPinValue>

	/*Set R/W to low to write */
	DIO_uint8SetPinValue(CLCD_CTR_PORT,CLCD_RW_PIN,DIO_uint8PIN_LOW);
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	61 e0       	ldi	r22, 0x01	; 1
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	0e 94 55 08 	call	0x10aa	; 0x10aa <DIO_uint8SetPinValue>

	/*Set command to data pins */
	DIO_uint8SetPortValue(CLCD_DATA_PORT,copy_uint8Command);
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	6f 85       	ldd	r22, Y+15	; 0x0f
     c90:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_uint8SetPortValue>

	/*Send enable pulse */
	DIO_uint8SetPinValue(CLCD_CTR_PORT,CLCD_EN_PIN,DIO_uint8PIN_HIGH);
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	62 e0       	ldi	r22, 0x02	; 2
     c98:	41 e0       	ldi	r20, 0x01	; 1
     c9a:	0e 94 55 08 	call	0x10aa	; 0x10aa <DIO_uint8SetPinValue>
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	b0 e4       	ldi	r27, 0x40	; 64
     ca6:	8b 87       	std	Y+11, r24	; 0x0b
     ca8:	9c 87       	std	Y+12, r25	; 0x0c
     caa:	ad 87       	std	Y+13, r26	; 0x0d
     cac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cae:	6b 85       	ldd	r22, Y+11	; 0x0b
     cb0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	4a ef       	ldi	r20, 0xFA	; 250
     cbc:	54 e4       	ldi	r21, 0x44	; 68
     cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc2:	dc 01       	movw	r26, r24
     cc4:	cb 01       	movw	r24, r22
     cc6:	8f 83       	std	Y+7, r24	; 0x07
     cc8:	98 87       	std	Y+8, r25	; 0x08
     cca:	a9 87       	std	Y+9, r26	; 0x09
     ccc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cce:	6f 81       	ldd	r22, Y+7	; 0x07
     cd0:	78 85       	ldd	r23, Y+8	; 0x08
     cd2:	89 85       	ldd	r24, Y+9	; 0x09
     cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 e8       	ldi	r20, 0x80	; 128
     cdc:	5f e3       	ldi	r21, 0x3F	; 63
     cde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ce2:	88 23       	and	r24, r24
     ce4:	2c f4       	brge	.+10     	; 0xcf0 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	9e 83       	std	Y+6, r25	; 0x06
     cec:	8d 83       	std	Y+5, r24	; 0x05
     cee:	3f c0       	rjmp	.+126    	; 0xd6e <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     cf0:	6f 81       	ldd	r22, Y+7	; 0x07
     cf2:	78 85       	ldd	r23, Y+8	; 0x08
     cf4:	89 85       	ldd	r24, Y+9	; 0x09
     cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	3f ef       	ldi	r19, 0xFF	; 255
     cfc:	4f e7       	ldi	r20, 0x7F	; 127
     cfe:	57 e4       	ldi	r21, 0x47	; 71
     d00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d04:	18 16       	cp	r1, r24
     d06:	4c f5       	brge	.+82     	; 0xd5a <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d08:	6b 85       	ldd	r22, Y+11	; 0x0b
     d0a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 e2       	ldi	r20, 0x20	; 32
     d16:	51 e4       	ldi	r21, 0x41	; 65
     d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	bc 01       	movw	r22, r24
     d22:	cd 01       	movw	r24, r26
     d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d28:	dc 01       	movw	r26, r24
     d2a:	cb 01       	movw	r24, r22
     d2c:	9e 83       	std	Y+6, r25	; 0x06
     d2e:	8d 83       	std	Y+5, r24	; 0x05
     d30:	0f c0       	rjmp	.+30     	; 0xd50 <CLCD_voidSendCommand+0xee>
     d32:	88 ec       	ldi	r24, 0xC8	; 200
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	9c 83       	std	Y+4, r25	; 0x04
     d38:	8b 83       	std	Y+3, r24	; 0x03
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	9c 81       	ldd	r25, Y+4	; 0x04
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <CLCD_voidSendCommand+0xdc>
     d42:	9c 83       	std	Y+4, r25	; 0x04
     d44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d46:	8d 81       	ldd	r24, Y+5	; 0x05
     d48:	9e 81       	ldd	r25, Y+6	; 0x06
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d50:	8d 81       	ldd	r24, Y+5	; 0x05
     d52:	9e 81       	ldd	r25, Y+6	; 0x06
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	69 f7       	brne	.-38     	; 0xd32 <CLCD_voidSendCommand+0xd0>
     d58:	14 c0       	rjmp	.+40     	; 0xd82 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d5a:	6f 81       	ldd	r22, Y+7	; 0x07
     d5c:	78 85       	ldd	r23, Y+8	; 0x08
     d5e:	89 85       	ldd	r24, Y+9	; 0x09
     d60:	9a 85       	ldd	r25, Y+10	; 0x0a
     d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	9e 83       	std	Y+6, r25	; 0x06
     d6c:	8d 83       	std	Y+5, r24	; 0x05
     d6e:	8d 81       	ldd	r24, Y+5	; 0x05
     d70:	9e 81       	ldd	r25, Y+6	; 0x06
     d72:	9a 83       	std	Y+2, r25	; 0x02
     d74:	89 83       	std	Y+1, r24	; 0x01
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <CLCD_voidSendCommand+0x118>
     d7e:	9a 83       	std	Y+2, r25	; 0x02
     d80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_uint8SetPinValue(CLCD_CTR_PORT,CLCD_EN_PIN,DIO_uint8PIN_LOW);
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	62 e0       	ldi	r22, 0x02	; 2
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	0e 94 55 08 	call	0x10aa	; 0x10aa <DIO_uint8SetPinValue>

}
     d8c:	2f 96       	adiw	r28, 0x0f	; 15
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <CLCD_voidSendData>:

/* This function used to send Data to LCD */
void CLCD_voidSendData(uint8 copy_uint8Data)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	2f 97       	sbiw	r28, 0x0f	; 15
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to high to send data */
	DIO_uint8SetPinValue(CLCD_CTR_PORT,CLCD_RS_PIN,DIO_uint8PIN_HIGH);
     db4:	82 e0       	ldi	r24, 0x02	; 2
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	41 e0       	ldi	r20, 0x01	; 1
     dba:	0e 94 55 08 	call	0x10aa	; 0x10aa <DIO_uint8SetPinValue>

	/*Set R/W to low to write */
	DIO_uint8SetPinValue(CLCD_CTR_PORT,CLCD_RW_PIN,DIO_uint8PIN_LOW);
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	61 e0       	ldi	r22, 0x01	; 1
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	0e 94 55 08 	call	0x10aa	; 0x10aa <DIO_uint8SetPinValue>

	/*Set Data  to data pins */
	DIO_uint8SetPortValue(CLCD_DATA_PORT,copy_uint8Data);
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	6f 85       	ldd	r22, Y+15	; 0x0f
     dcc:	0e 94 67 09 	call	0x12ce	; 0x12ce <DIO_uint8SetPortValue>

	/*Send enable pulse */
	DIO_uint8SetPinValue(CLCD_CTR_PORT,CLCD_EN_PIN,DIO_uint8PIN_HIGH);
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	62 e0       	ldi	r22, 0x02	; 2
     dd4:	41 e0       	ldi	r20, 0x01	; 1
     dd6:	0e 94 55 08 	call	0x10aa	; 0x10aa <DIO_uint8SetPinValue>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a0 e0       	ldi	r26, 0x00	; 0
     de0:	b0 e4       	ldi	r27, 0x40	; 64
     de2:	8b 87       	std	Y+11, r24	; 0x0b
     de4:	9c 87       	std	Y+12, r25	; 0x0c
     de6:	ad 87       	std	Y+13, r26	; 0x0d
     de8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dea:	6b 85       	ldd	r22, Y+11	; 0x0b
     dec:	7c 85       	ldd	r23, Y+12	; 0x0c
     dee:	8d 85       	ldd	r24, Y+13	; 0x0d
     df0:	9e 85       	ldd	r25, Y+14	; 0x0e
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	4a ef       	ldi	r20, 0xFA	; 250
     df8:	54 e4       	ldi	r21, 0x44	; 68
     dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	8f 83       	std	Y+7, r24	; 0x07
     e04:	98 87       	std	Y+8, r25	; 0x08
     e06:	a9 87       	std	Y+9, r26	; 0x09
     e08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e0a:	6f 81       	ldd	r22, Y+7	; 0x07
     e0c:	78 85       	ldd	r23, Y+8	; 0x08
     e0e:	89 85       	ldd	r24, Y+9	; 0x09
     e10:	9a 85       	ldd	r25, Y+10	; 0x0a
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e8       	ldi	r20, 0x80	; 128
     e18:	5f e3       	ldi	r21, 0x3F	; 63
     e1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e1e:	88 23       	and	r24, r24
     e20:	2c f4       	brge	.+10     	; 0xe2c <CLCD_voidSendData+0x8e>
		__ticks = 1;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	9e 83       	std	Y+6, r25	; 0x06
     e28:	8d 83       	std	Y+5, r24	; 0x05
     e2a:	3f c0       	rjmp	.+126    	; 0xeaa <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     e2c:	6f 81       	ldd	r22, Y+7	; 0x07
     e2e:	78 85       	ldd	r23, Y+8	; 0x08
     e30:	89 85       	ldd	r24, Y+9	; 0x09
     e32:	9a 85       	ldd	r25, Y+10	; 0x0a
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	3f ef       	ldi	r19, 0xFF	; 255
     e38:	4f e7       	ldi	r20, 0x7F	; 127
     e3a:	57 e4       	ldi	r21, 0x47	; 71
     e3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e40:	18 16       	cp	r1, r24
     e42:	4c f5       	brge	.+82     	; 0xe96 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e44:	6b 85       	ldd	r22, Y+11	; 0x0b
     e46:	7c 85       	ldd	r23, Y+12	; 0x0c
     e48:	8d 85       	ldd	r24, Y+13	; 0x0d
     e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e2       	ldi	r20, 0x20	; 32
     e52:	51 e4       	ldi	r21, 0x41	; 65
     e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	bc 01       	movw	r22, r24
     e5e:	cd 01       	movw	r24, r26
     e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	9e 83       	std	Y+6, r25	; 0x06
     e6a:	8d 83       	std	Y+5, r24	; 0x05
     e6c:	0f c0       	rjmp	.+30     	; 0xe8c <CLCD_voidSendData+0xee>
     e6e:	88 ec       	ldi	r24, 0xC8	; 200
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	9c 83       	std	Y+4, r25	; 0x04
     e74:	8b 83       	std	Y+3, r24	; 0x03
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <CLCD_voidSendData+0xdc>
     e7e:	9c 83       	std	Y+4, r25	; 0x04
     e80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	9e 81       	ldd	r25, Y+6	; 0x06
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e8c:	8d 81       	ldd	r24, Y+5	; 0x05
     e8e:	9e 81       	ldd	r25, Y+6	; 0x06
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	69 f7       	brne	.-38     	; 0xe6e <CLCD_voidSendData+0xd0>
     e94:	14 c0       	rjmp	.+40     	; 0xebe <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e96:	6f 81       	ldd	r22, Y+7	; 0x07
     e98:	78 85       	ldd	r23, Y+8	; 0x08
     e9a:	89 85       	ldd	r24, Y+9	; 0x09
     e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	9e 83       	std	Y+6, r25	; 0x06
     ea8:	8d 83       	std	Y+5, r24	; 0x05
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	9e 81       	ldd	r25, Y+6	; 0x06
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <CLCD_voidSendData+0x118>
     eba:	9a 83       	std	Y+2, r25	; 0x02
     ebc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_uint8SetPinValue(CLCD_CTR_PORT,CLCD_EN_PIN,DIO_uint8PIN_LOW);
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	62 e0       	ldi	r22, 0x02	; 2
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	0e 94 55 08 	call	0x10aa	; 0x10aa <DIO_uint8SetPinValue>


}
     ec8:	2f 96       	adiw	r28, 0x0f	; 15
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <CLCD_voidSendString>:
/* This function used to send string Data  to LCD */
void CLCD_voidSendString(const char* copy_pcString)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <CLCD_voidSendString+0x6>
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	9b 83       	std	Y+3, r25	; 0x03
     ee8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8counter=0 ;
     eea:	19 82       	std	Y+1, r1	; 0x01
     eec:	0e c0       	rjmp	.+28     	; 0xf0a <CLCD_voidSendString+0x30>
	while(copy_pcString[Local_uint8counter]!='\0')
	{
		CLCD_voidSendData(copy_pcString[Local_uint8counter]);
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	9b 81       	ldd	r25, Y+3	; 0x03
     ef8:	fc 01       	movw	r30, r24
     efa:	e2 0f       	add	r30, r18
     efc:	f3 1f       	adc	r31, r19
     efe:	80 81       	ld	r24, Z
     f00:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CLCD_voidSendData>
		Local_uint8counter++;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	89 83       	std	Y+1, r24	; 0x01
}
/* This function used to send string Data  to LCD */
void CLCD_voidSendString(const char* copy_pcString)
{
	uint8 Local_uint8counter=0 ;
	while(copy_pcString[Local_uint8counter]!='\0')
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	fc 01       	movw	r30, r24
     f16:	e2 0f       	add	r30, r18
     f18:	f3 1f       	adc	r31, r19
     f1a:	80 81       	ld	r24, Z
     f1c:	88 23       	and	r24, r24
     f1e:	39 f7       	brne	.-50     	; 0xeee <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(copy_pcString[Local_uint8counter]);
		Local_uint8counter++;
	}
}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <CLCD_voidGoToXY>:
/*Function used to specific location at LCD*/
void CLCD_voidGoToXY(uint8 Copy_uint8Xposition,uint8 Copy_uint8Yposition)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	00 d0       	rcall	.+0      	; 0xf32 <CLCD_voidGoToXY+0x6>
     f32:	0f 92       	push	r0
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	8a 83       	std	Y+2, r24	; 0x02
     f3a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_uint8Address;
	if(Copy_uint8Xposition==0)
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	88 23       	and	r24, r24
     f40:	19 f4       	brne	.+6      	; 0xf48 <CLCD_voidGoToXY+0x1c>
	{
		/*Location is at first line*/
		Local_uint8Address=Copy_uint8Yposition;
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	06 c0       	rjmp	.+12     	; 0xf54 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_uint8Xposition==1)
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	19 f4       	brne	.+6      	; 0xf54 <CLCD_voidGoToXY+0x28>
	{
		/*Location is at second line*/
		Local_uint8Address=0x40+Copy_uint8Yposition;
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	80 5c       	subi	r24, 0xC0	; 192
     f52:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Now, my role to ask LCD to go to my address
	 *set bit 7 for set DDRAM Address command then send the command */
	CLCD_voidSendCommand(Local_uint8Address+128);
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	80 58       	subi	r24, 0x80	; 128
     f58:	0e 94 31 06 	call	0xc62	; 0xc62 <CLCD_voidSendCommand>
}
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(uint8* Copy_puint8Pattern,uint8 Copy_uint8PatternNumber,uint8 Copy_uint8Xposition,uint8 Copy_uint8Yposition )
{
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	27 97       	sbiw	r28, 0x07	; 7
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	9c 83       	std	Y+4, r25	; 0x04
     f7e:	8b 83       	std	Y+3, r24	; 0x03
     f80:	6d 83       	std	Y+5, r22	; 0x05
     f82:	4e 83       	std	Y+6, r20	; 0x06
     f84:	2f 83       	std	Y+7, r18	; 0x07

	uint8 Local_uint8CGRAMAddress=0,Local_uint8Iterator;
     f86:	1a 82       	std	Y+2, r1	; 0x02
	/*calculate the CGRAM address whose each block is 8 byte*/

	Local_uint8CGRAMAddress=Copy_uint8PatternNumber*8;
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	8a 83       	std	Y+2, r24	; 0x02
	/*Send CGRAM coomand to LCD , with setting bit 6 */
	CLCD_voidSendCommand(Local_uint8CGRAMAddress+64);
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	80 5c       	subi	r24, 0xC0	; 192
     fa0:	0e 94 31 06 	call	0xc62	; 0xc62 <CLCD_voidSendCommand>

	/*Write pattern into CGRAM*/
	for(Local_uint8Iterator=0;Local_uint8Iterator<8;Local_uint8Iterator++)
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	0e c0       	rjmp	.+28     	; 0xfc4 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_puint8Pattern[Local_uint8Iterator]);
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	9c 81       	ldd	r25, Y+4	; 0x04
     fb2:	fc 01       	movw	r30, r24
     fb4:	e2 0f       	add	r30, r18
     fb6:	f3 1f       	adc	r31, r19
     fb8:	80 81       	ld	r24, Z
     fba:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CLCD_voidSendData>
	Local_uint8CGRAMAddress=Copy_uint8PatternNumber*8;
	/*Send CGRAM coomand to LCD , with setting bit 6 */
	CLCD_voidSendCommand(Local_uint8CGRAMAddress+64);

	/*Write pattern into CGRAM*/
	for(Local_uint8Iterator=0;Local_uint8Iterator<8;Local_uint8Iterator++)
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	88 30       	cpi	r24, 0x08	; 8
     fc8:	78 f3       	brcs	.-34     	; 0xfa8 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_puint8Pattern[Local_uint8Iterator]);
	}
	/*Go back to DDRAM to display the pattern*/
	CLCD_voidGoToXY(Copy_uint8Xposition,Copy_uint8Yposition);
     fca:	8e 81       	ldd	r24, Y+6	; 0x06
     fcc:	6f 81       	ldd	r22, Y+7	; 0x07
     fce:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_voidGoToXY>

	/*Display the pattern written in the CGRAM*/
	CLCD_voidSendData(Copy_uint8PatternNumber);
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CLCD_voidSendData>

}
     fd8:	27 96       	adiw	r28, 0x07	; 7
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <CLCD_voidWriteNumber>:
   }while(Local_u32Reserved !=1);// Stop when only the initial marker (1) remains
}
*/

void CLCD_voidWriteNumber(uint32 Copy_uint32Number)
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	00 d0       	rcall	.+0      	; 0xff0 <CLCD_voidWriteNumber+0x6>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <CLCD_voidWriteNumber+0x8>
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <CLCD_voidWriteNumber+0xa>
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	9e 83       	std	Y+6, r25	; 0x06
     ffa:	8d 83       	std	Y+5, r24	; 0x05
   if (Copy_uint32Number == 0)
     ffc:	8d 81       	ldd	r24, Y+5	; 0x05
     ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	21 f4       	brne	.+8      	; 0x100c <CLCD_voidWriteNumber+0x22>
   {
       CLCD_voidSendData('0'); // Handle special case where number is 0
    1004:	80 e3       	ldi	r24, 0x30	; 48
    1006:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CLCD_voidSendData>
    100a:	46 c0       	rjmp	.+140    	; 0x1098 <CLCD_voidWriteNumber+0xae>
       return;
   }

   uint32 Local_u32Reversed = 0;
    100c:	1c 82       	std	Y+4, r1	; 0x04
    100e:	1b 82       	std	Y+3, r1	; 0x03
   uint32 temp = Copy_uint32Number;
    1010:	8d 81       	ldd	r24, Y+5	; 0x05
    1012:	9e 81       	ldd	r25, Y+6	; 0x06
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	22 c0       	rjmp	.+68     	; 0x105e <CLCD_voidWriteNumber+0x74>

   // Reverse the number correctly
   while (temp != 0)
   {
       Local_u32Reversed = Local_u32Reversed * 10 + (temp % 10);
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	9c 01       	movw	r18, r24
    1020:	22 0f       	add	r18, r18
    1022:	33 1f       	adc	r19, r19
    1024:	c9 01       	movw	r24, r18
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	f9 01       	movw	r30, r18
    1030:	e8 0f       	add	r30, r24
    1032:	f9 1f       	adc	r31, r25
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	9a 81       	ldd	r25, Y+2	; 0x02
    1038:	2a e0       	ldi	r18, 0x0A	; 10
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	b9 01       	movw	r22, r18
    103e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__udivmodhi4>
    1042:	8e 0f       	add	r24, r30
    1044:	9f 1f       	adc	r25, r31
    1046:	9c 83       	std	Y+4, r25	; 0x04
    1048:	8b 83       	std	Y+3, r24	; 0x03
       temp /= 10;
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	9a 81       	ldd	r25, Y+2	; 0x02
    104e:	2a e0       	ldi	r18, 0x0A	; 10
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	b9 01       	movw	r22, r18
    1054:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__udivmodhi4>
    1058:	cb 01       	movw	r24, r22
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	89 83       	std	Y+1, r24	; 0x01

   uint32 Local_u32Reversed = 0;
   uint32 temp = Copy_uint32Number;

   // Reverse the number correctly
   while (temp != 0)
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	9a 81       	ldd	r25, Y+2	; 0x02
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	d1 f6       	brne	.-76     	; 0x101a <CLCD_voidWriteNumber+0x30>
    1066:	14 c0       	rjmp	.+40     	; 0x1090 <CLCD_voidWriteNumber+0xa6>
   }

   // Print the digits in correct order
   while (Local_u32Reversed != 0)
   {
       CLCD_voidSendData((Local_u32Reversed % 10) + '0');
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	2a e0       	ldi	r18, 0x0A	; 10
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	b9 01       	movw	r22, r18
    1072:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__udivmodhi4>
    1076:	80 5d       	subi	r24, 0xD0	; 208
    1078:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CLCD_voidSendData>
       Local_u32Reversed /= 10;
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	9c 81       	ldd	r25, Y+4	; 0x04
    1080:	2a e0       	ldi	r18, 0x0A	; 10
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	b9 01       	movw	r22, r18
    1086:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__udivmodhi4>
    108a:	cb 01       	movw	r24, r22
    108c:	9c 83       	std	Y+4, r25	; 0x04
    108e:	8b 83       	std	Y+3, r24	; 0x03
       Local_u32Reversed = Local_u32Reversed * 10 + (temp % 10);
       temp /= 10;
   }

   // Print the digits in correct order
   while (Local_u32Reversed != 0)
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	9c 81       	ldd	r25, Y+4	; 0x04
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	41 f7       	brne	.-48     	; 0x1068 <CLCD_voidWriteNumber+0x7e>
   {
       CLCD_voidSendData((Local_u32Reversed % 10) + '0');
       Local_u32Reversed /= 10;
   }
}
    1098:	26 96       	adiw	r28, 0x06	; 6
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <DIO_uint8SetPinValue>:




uint8 DIO_uint8SetPinValue(uint8 Copy_uint8Port,uint8 Copy_uint8Pin,uint8 Copy_uint8Value)
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	28 97       	sbiw	r28, 0x08	; 8
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	8a 83       	std	Y+2, r24	; 0x02
    10c0:	6b 83       	std	Y+3, r22	; 0x03
    10c2:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_uint8ErrorState = 0 ;
    10c4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint8Pin<=DIO_uint8PIN7 )
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	88 30       	cpi	r24, 0x08	; 8
    10ca:	08 f0       	brcs	.+2      	; 0x10ce <DIO_uint8SetPinValue+0x24>
    10cc:	f4 c0       	rjmp	.+488    	; 0x12b6 <DIO_uint8SetPinValue+0x20c>
	{
		if(Copy_uint8Value == DIO_uint8PIN_HIGH)
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <DIO_uint8SetPinValue+0x2c>
    10d4:	72 c0       	rjmp	.+228    	; 0x11ba <DIO_uint8SetPinValue+0x110>
		{
			switch(Copy_uint8Port)
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	38 87       	std	Y+8, r19	; 0x08
    10de:	2f 83       	std	Y+7, r18	; 0x07
    10e0:	8f 81       	ldd	r24, Y+7	; 0x07
    10e2:	98 85       	ldd	r25, Y+8	; 0x08
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	91 05       	cpc	r25, r1
    10e8:	49 f1       	breq	.+82     	; 0x113c <DIO_uint8SetPinValue+0x92>
    10ea:	2f 81       	ldd	r18, Y+7	; 0x07
    10ec:	38 85       	ldd	r19, Y+8	; 0x08
    10ee:	22 30       	cpi	r18, 0x02	; 2
    10f0:	31 05       	cpc	r19, r1
    10f2:	2c f4       	brge	.+10     	; 0x10fe <DIO_uint8SetPinValue+0x54>
    10f4:	8f 81       	ldd	r24, Y+7	; 0x07
    10f6:	98 85       	ldd	r25, Y+8	; 0x08
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	61 f0       	breq	.+24     	; 0x1114 <DIO_uint8SetPinValue+0x6a>
    10fc:	5b c0       	rjmp	.+182    	; 0x11b4 <DIO_uint8SetPinValue+0x10a>
    10fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1100:	38 85       	ldd	r19, Y+8	; 0x08
    1102:	22 30       	cpi	r18, 0x02	; 2
    1104:	31 05       	cpc	r19, r1
    1106:	71 f1       	breq	.+92     	; 0x1164 <DIO_uint8SetPinValue+0xba>
    1108:	8f 81       	ldd	r24, Y+7	; 0x07
    110a:	98 85       	ldd	r25, Y+8	; 0x08
    110c:	83 30       	cpi	r24, 0x03	; 3
    110e:	91 05       	cpc	r25, r1
    1110:	e9 f1       	breq	.+122    	; 0x118c <DIO_uint8SetPinValue+0xe2>
    1112:	50 c0       	rjmp	.+160    	; 0x11b4 <DIO_uint8SetPinValue+0x10a>
			{
			case DIO_uint8PORTA : SET_BIT(PORTA,Copy_uint8Pin);  break;
    1114:	ab e3       	ldi	r26, 0x3B	; 59
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	eb e3       	ldi	r30, 0x3B	; 59
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_uint8SetPinValue+0x88>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <DIO_uint8SetPinValue+0x84>
    1136:	84 2b       	or	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	bf c0       	rjmp	.+382    	; 0x12ba <DIO_uint8SetPinValue+0x210>
			case DIO_uint8PORTB : SET_BIT(PORTB,Copy_uint8Pin);  break;
    113c:	a8 e3       	ldi	r26, 0x38	; 56
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e8 e3       	ldi	r30, 0x38	; 56
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_uint8SetPinValue+0xb0>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_uint8SetPinValue+0xac>
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	ab c0       	rjmp	.+342    	; 0x12ba <DIO_uint8SetPinValue+0x210>
			case DIO_uint8PORTC : SET_BIT(PORTC,Copy_uint8Pin);  break;
    1164:	a5 e3       	ldi	r26, 0x35	; 53
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e5 e3       	ldi	r30, 0x35	; 53
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <DIO_uint8SetPinValue+0xd8>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <DIO_uint8SetPinValue+0xd4>
    1186:	84 2b       	or	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	97 c0       	rjmp	.+302    	; 0x12ba <DIO_uint8SetPinValue+0x210>
			case DIO_uint8PORTD : SET_BIT(PORTD,Copy_uint8Pin);  break;
    118c:	a2 e3       	ldi	r26, 0x32	; 50
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e2 e3       	ldi	r30, 0x32	; 50
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_uint8SetPinValue+0x100>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_uint8SetPinValue+0xfc>
    11ae:	84 2b       	or	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	83 c0       	rjmp	.+262    	; 0x12ba <DIO_uint8SetPinValue+0x210>
			default             : Local_uint8ErrorState = 1   ;  break;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	80 c0       	rjmp	.+256    	; 0x12ba <DIO_uint8SetPinValue+0x210>
			}
		}

		else if (Copy_uint8Value == DIO_uint8PIN_LOW)
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	88 23       	and	r24, r24
    11be:	09 f0       	breq	.+2      	; 0x11c2 <DIO_uint8SetPinValue+0x118>
    11c0:	77 c0       	rjmp	.+238    	; 0x12b0 <DIO_uint8SetPinValue+0x206>
		{
			switch(Copy_uint8Port)
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	3e 83       	std	Y+6, r19	; 0x06
    11ca:	2d 83       	std	Y+5, r18	; 0x05
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
    11ce:	9e 81       	ldd	r25, Y+6	; 0x06
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	91 05       	cpc	r25, r1
    11d4:	59 f1       	breq	.+86     	; 0x122c <DIO_uint8SetPinValue+0x182>
    11d6:	2d 81       	ldd	r18, Y+5	; 0x05
    11d8:	3e 81       	ldd	r19, Y+6	; 0x06
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	2c f4       	brge	.+10     	; 0x11ea <DIO_uint8SetPinValue+0x140>
    11e0:	8d 81       	ldd	r24, Y+5	; 0x05
    11e2:	9e 81       	ldd	r25, Y+6	; 0x06
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	69 f0       	breq	.+26     	; 0x1202 <DIO_uint8SetPinValue+0x158>
    11e8:	60 c0       	rjmp	.+192    	; 0x12aa <DIO_uint8SetPinValue+0x200>
    11ea:	2d 81       	ldd	r18, Y+5	; 0x05
    11ec:	3e 81       	ldd	r19, Y+6	; 0x06
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	89 f1       	breq	.+98     	; 0x1256 <DIO_uint8SetPinValue+0x1ac>
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	9e 81       	ldd	r25, Y+6	; 0x06
    11f8:	83 30       	cpi	r24, 0x03	; 3
    11fa:	91 05       	cpc	r25, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <DIO_uint8SetPinValue+0x156>
    11fe:	40 c0       	rjmp	.+128    	; 0x1280 <DIO_uint8SetPinValue+0x1d6>
    1200:	54 c0       	rjmp	.+168    	; 0x12aa <DIO_uint8SetPinValue+0x200>
			{
			case DIO_uint8PORTA : CLR_BIT(PORTA,Copy_uint8Pin);  break;
    1202:	ab e3       	ldi	r26, 0x3B	; 59
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	eb e3       	ldi	r30, 0x3B	; 59
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_uint8SetPinValue+0x176>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_uint8SetPinValue+0x172>
    1224:	80 95       	com	r24
    1226:	84 23       	and	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	47 c0       	rjmp	.+142    	; 0x12ba <DIO_uint8SetPinValue+0x210>
			case DIO_uint8PORTB : CLR_BIT(PORTB,Copy_uint8Pin);  break;
    122c:	a8 e3       	ldi	r26, 0x38	; 56
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e8 e3       	ldi	r30, 0x38	; 56
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_uint8SetPinValue+0x1a0>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_uint8SetPinValue+0x19c>
    124e:	80 95       	com	r24
    1250:	84 23       	and	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	32 c0       	rjmp	.+100    	; 0x12ba <DIO_uint8SetPinValue+0x210>
			case DIO_uint8PORTC : CLR_BIT(PORTC,Copy_uint8Pin);  break;
    1256:	a5 e3       	ldi	r26, 0x35	; 53
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e5 e3       	ldi	r30, 0x35	; 53
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <DIO_uint8SetPinValue+0x1ca>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <DIO_uint8SetPinValue+0x1c6>
    1278:	80 95       	com	r24
    127a:	84 23       	and	r24, r20
    127c:	8c 93       	st	X, r24
    127e:	1d c0       	rjmp	.+58     	; 0x12ba <DIO_uint8SetPinValue+0x210>
			case DIO_uint8PORTD : CLR_BIT(PORTD,Copy_uint8Pin);  break;
    1280:	a2 e3       	ldi	r26, 0x32	; 50
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e2 e3       	ldi	r30, 0x32	; 50
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <DIO_uint8SetPinValue+0x1f4>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <DIO_uint8SetPinValue+0x1f0>
    12a2:	80 95       	com	r24
    12a4:	84 23       	and	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	08 c0       	rjmp	.+16     	; 0x12ba <DIO_uint8SetPinValue+0x210>
			default             : Local_uint8ErrorState = 1   ; break ;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	05 c0       	rjmp	.+10     	; 0x12ba <DIO_uint8SetPinValue+0x210>
			}
		}
		else
		{
			Local_uint8ErrorState = 1 ;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_uint8SetPinValue+0x210>
		}
	}
	else
	{
		Local_uint8ErrorState = 1 ;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_uint8ErrorState ;
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    12bc:	28 96       	adiw	r28, 0x08	; 8
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <DIO_uint8SetPortValue>:

uint8 DIO_uint8SetPortValue(uint8 Copy_uint8Port,uint8 Copy_uint8Value)
{
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <DIO_uint8SetPortValue+0x6>
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <DIO_uint8SetPortValue+0x8>
    12d6:	0f 92       	push	r0
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	8a 83       	std	Y+2, r24	; 0x02
    12de:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_uint8ErrorState = 0 ;
    12e0:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_uint8Port)
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	3d 83       	std	Y+5, r19	; 0x05
    12ea:	2c 83       	std	Y+4, r18	; 0x04
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	9d 81       	ldd	r25, Y+5	; 0x05
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	91 05       	cpc	r25, r1
    12f4:	d1 f0       	breq	.+52     	; 0x132a <DIO_uint8SetPortValue+0x5c>
    12f6:	2c 81       	ldd	r18, Y+4	; 0x04
    12f8:	3d 81       	ldd	r19, Y+5	; 0x05
    12fa:	22 30       	cpi	r18, 0x02	; 2
    12fc:	31 05       	cpc	r19, r1
    12fe:	2c f4       	brge	.+10     	; 0x130a <DIO_uint8SetPortValue+0x3c>
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
    1302:	9d 81       	ldd	r25, Y+5	; 0x05
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	61 f0       	breq	.+24     	; 0x1320 <DIO_uint8SetPortValue+0x52>
    1308:	1f c0       	rjmp	.+62     	; 0x1348 <DIO_uint8SetPortValue+0x7a>
    130a:	2c 81       	ldd	r18, Y+4	; 0x04
    130c:	3d 81       	ldd	r19, Y+5	; 0x05
    130e:	22 30       	cpi	r18, 0x02	; 2
    1310:	31 05       	cpc	r19, r1
    1312:	81 f0       	breq	.+32     	; 0x1334 <DIO_uint8SetPortValue+0x66>
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	9d 81       	ldd	r25, Y+5	; 0x05
    1318:	83 30       	cpi	r24, 0x03	; 3
    131a:	91 05       	cpc	r25, r1
    131c:	81 f0       	breq	.+32     	; 0x133e <DIO_uint8SetPortValue+0x70>
    131e:	14 c0       	rjmp	.+40     	; 0x1348 <DIO_uint8SetPortValue+0x7a>
	{
	case DIO_uint8PORTA : PORTA = Copy_uint8Value   ;   break;
    1320:	eb e3       	ldi	r30, 0x3B	; 59
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	80 83       	st	Z, r24
    1328:	11 c0       	rjmp	.+34     	; 0x134c <DIO_uint8SetPortValue+0x7e>
	case DIO_uint8PORTB : PORTB = Copy_uint8Value   ;   break;
    132a:	e8 e3       	ldi	r30, 0x38	; 56
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	80 83       	st	Z, r24
    1332:	0c c0       	rjmp	.+24     	; 0x134c <DIO_uint8SetPortValue+0x7e>
	case DIO_uint8PORTC : PORTC = Copy_uint8Value   ;   break;
    1334:	e5 e3       	ldi	r30, 0x35	; 53
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	80 83       	st	Z, r24
    133c:	07 c0       	rjmp	.+14     	; 0x134c <DIO_uint8SetPortValue+0x7e>
	case DIO_uint8PORTD : PORTD = Copy_uint8Value   ;   break;
    133e:	e2 e3       	ldi	r30, 0x32	; 50
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	80 83       	st	Z, r24
    1346:	02 c0       	rjmp	.+4      	; 0x134c <DIO_uint8SetPortValue+0x7e>
	default             : Local_uint8ErrorState = 1 ;   break;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_uint8ErrorState ;
    134c:	89 81       	ldd	r24, Y+1	; 0x01
	}
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <DIO_uint8GetPinValue>:

	uint8 DIO_uint8GetPinValue(uint8 Copy_uint8Port,uint8 Copy_uint8Pin,uint8* Copy_Puint8Value)
	{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	27 97       	sbiw	r28, 0x07	; 7
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
    1372:	8a 83       	std	Y+2, r24	; 0x02
    1374:	6b 83       	std	Y+3, r22	; 0x03
    1376:	5d 83       	std	Y+5, r21	; 0x05
    1378:	4c 83       	std	Y+4, r20	; 0x04

		uint8 Local_uint8ErrorState = 0 ;
    137a:	19 82       	std	Y+1, r1	; 0x01
		if((Copy_Puint8Value !=NULL) && Copy_uint8Pin<=DIO_uint8PIN7)
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	9d 81       	ldd	r25, Y+5	; 0x05
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	09 f4       	brne	.+2      	; 0x1386 <DIO_uint8GetPinValue+0x28>
    1384:	78 c0       	rjmp	.+240    	; 0x1476 <DIO_uint8GetPinValue+0x118>
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	88 30       	cpi	r24, 0x08	; 8
    138a:	08 f0       	brcs	.+2      	; 0x138e <DIO_uint8GetPinValue+0x30>
    138c:	74 c0       	rjmp	.+232    	; 0x1476 <DIO_uint8GetPinValue+0x118>
		{

			switch(Copy_uint8Port)
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	3f 83       	std	Y+7, r19	; 0x07
    1396:	2e 83       	std	Y+6, r18	; 0x06
    1398:	4e 81       	ldd	r20, Y+6	; 0x06
    139a:	5f 81       	ldd	r21, Y+7	; 0x07
    139c:	41 30       	cpi	r20, 0x01	; 1
    139e:	51 05       	cpc	r21, r1
    13a0:	59 f1       	breq	.+86     	; 0x13f8 <DIO_uint8GetPinValue+0x9a>
    13a2:	8e 81       	ldd	r24, Y+6	; 0x06
    13a4:	9f 81       	ldd	r25, Y+7	; 0x07
    13a6:	82 30       	cpi	r24, 0x02	; 2
    13a8:	91 05       	cpc	r25, r1
    13aa:	34 f4       	brge	.+12     	; 0x13b8 <DIO_uint8GetPinValue+0x5a>
    13ac:	2e 81       	ldd	r18, Y+6	; 0x06
    13ae:	3f 81       	ldd	r19, Y+7	; 0x07
    13b0:	21 15       	cp	r18, r1
    13b2:	31 05       	cpc	r19, r1
    13b4:	69 f0       	breq	.+26     	; 0x13d0 <DIO_uint8GetPinValue+0x72>
    13b6:	5c c0       	rjmp	.+184    	; 0x1470 <DIO_uint8GetPinValue+0x112>
    13b8:	4e 81       	ldd	r20, Y+6	; 0x06
    13ba:	5f 81       	ldd	r21, Y+7	; 0x07
    13bc:	42 30       	cpi	r20, 0x02	; 2
    13be:	51 05       	cpc	r21, r1
    13c0:	79 f1       	breq	.+94     	; 0x1420 <DIO_uint8GetPinValue+0xc2>
    13c2:	8e 81       	ldd	r24, Y+6	; 0x06
    13c4:	9f 81       	ldd	r25, Y+7	; 0x07
    13c6:	83 30       	cpi	r24, 0x03	; 3
    13c8:	91 05       	cpc	r25, r1
    13ca:	09 f4       	brne	.+2      	; 0x13ce <DIO_uint8GetPinValue+0x70>
    13cc:	3d c0       	rjmp	.+122    	; 0x1448 <DIO_uint8GetPinValue+0xea>
    13ce:	50 c0       	rjmp	.+160    	; 0x1470 <DIO_uint8GetPinValue+0x112>
			{
			case DIO_uint8PORTA :  *Copy_Puint8Value = GET_BIT(PINA,Copy_uint8Pin) ; break;
    13d0:	e9 e3       	ldi	r30, 0x39	; 57
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a9 01       	movw	r20, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <DIO_uint8GetPinValue+0x8a>
    13e4:	55 95       	asr	r21
    13e6:	47 95       	ror	r20
    13e8:	8a 95       	dec	r24
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <DIO_uint8GetPinValue+0x86>
    13ec:	ca 01       	movw	r24, r20
    13ee:	81 70       	andi	r24, 0x01	; 1
    13f0:	ec 81       	ldd	r30, Y+4	; 0x04
    13f2:	fd 81       	ldd	r31, Y+5	; 0x05
    13f4:	80 83       	st	Z, r24
    13f6:	41 c0       	rjmp	.+130    	; 0x147a <DIO_uint8GetPinValue+0x11c>
			case DIO_uint8PORTB :  *Copy_Puint8Value = GET_BIT(PINB,Copy_uint8Pin) ; break;
    13f8:	e6 e3       	ldi	r30, 0x36	; 54
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a9 01       	movw	r20, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_uint8GetPinValue+0xb2>
    140c:	55 95       	asr	r21
    140e:	47 95       	ror	r20
    1410:	8a 95       	dec	r24
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_uint8GetPinValue+0xae>
    1414:	ca 01       	movw	r24, r20
    1416:	81 70       	andi	r24, 0x01	; 1
    1418:	ec 81       	ldd	r30, Y+4	; 0x04
    141a:	fd 81       	ldd	r31, Y+5	; 0x05
    141c:	80 83       	st	Z, r24
    141e:	2d c0       	rjmp	.+90     	; 0x147a <DIO_uint8GetPinValue+0x11c>
			case DIO_uint8PORTC :  *Copy_Puint8Value = GET_BIT(PINC,Copy_uint8Pin) ; break;
    1420:	e3 e3       	ldi	r30, 0x33	; 51
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	88 2f       	mov	r24, r24
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	a9 01       	movw	r20, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_uint8GetPinValue+0xda>
    1434:	55 95       	asr	r21
    1436:	47 95       	ror	r20
    1438:	8a 95       	dec	r24
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_uint8GetPinValue+0xd6>
    143c:	ca 01       	movw	r24, r20
    143e:	81 70       	andi	r24, 0x01	; 1
    1440:	ec 81       	ldd	r30, Y+4	; 0x04
    1442:	fd 81       	ldd	r31, Y+5	; 0x05
    1444:	80 83       	st	Z, r24
    1446:	19 c0       	rjmp	.+50     	; 0x147a <DIO_uint8GetPinValue+0x11c>
			case DIO_uint8PORTD :  *Copy_Puint8Value = GET_BIT(PIND,Copy_uint8Pin) ; break;
    1448:	e0 e3       	ldi	r30, 0x30	; 48
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	a9 01       	movw	r20, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_uint8GetPinValue+0x102>
    145c:	55 95       	asr	r21
    145e:	47 95       	ror	r20
    1460:	8a 95       	dec	r24
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_uint8GetPinValue+0xfe>
    1464:	ca 01       	movw	r24, r20
    1466:	81 70       	andi	r24, 0x01	; 1
    1468:	ec 81       	ldd	r30, Y+4	; 0x04
    146a:	fd 81       	ldd	r31, Y+5	; 0x05
    146c:	80 83       	st	Z, r24
    146e:	05 c0       	rjmp	.+10     	; 0x147a <DIO_uint8GetPinValue+0x11c>
			default             :  Local_uint8ErrorState = 1 ;                        break;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	89 83       	std	Y+1, r24	; 0x01
    1474:	02 c0       	rjmp	.+4      	; 0x147a <DIO_uint8GetPinValue+0x11c>
			}
		}
		else
		{
			Local_uint8ErrorState = 1 ;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	89 83       	std	Y+1, r24	; 0x01
		}


	return Local_uint8ErrorState ;
    147a:	89 81       	ldd	r24, Y+1	; 0x01
}
    147c:	27 96       	adiw	r28, 0x07	; 7
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <EXTI_voidInt0Init>:

/*Global  pointer to Function to hold INT0 ISR addresses */
void (*EXTI_pvInt0Fun)(void)=NULL;

void EXTI_voidInt0Init(void)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62

	/*Set Sense control for INT0 to rising edge
	 * ISC01 -> 1  ISC00 ->  1  The rising edge of INT0 generates an interrupt request */

#elif INT0_SENSE_CONTROL == EXTI_RISING_EDGE_SENCE_CONTROL
	SET_BIT(MCUCR,MCUCR_ISC01);
    1496:	a5 e5       	ldi	r26, 0x55	; 85
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e5 e5       	ldi	r30, 0x55	; 85
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	82 60       	ori	r24, 0x02	; 2
    14a2:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC00);
    14a4:	a5 e5       	ldi	r26, 0x55	; 85
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e5 e5       	ldi	r30, 0x55	; 85
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	81 60       	ori	r24, 0x01	; 1
    14b0:	8c 93       	st	X, r24
	/*Check peripheral interrupt enable initial state */

	/*peripheral interrupt enable for INT0  ((SIE))*/

#if INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
    14b2:	ab e5       	ldi	r26, 0x5B	; 91
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	eb e5       	ldi	r30, 0x5B	; 91
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	80 64       	ori	r24, 0x40	; 64
    14be:	8c 93       	st	X, r24
#else
#error "You choose a wrong INT0_INITIAL_STATE configuration options !! "
#endif


}
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <EXTI_uint8Int0SetSenseControl>:



uint8 EXTI_uint8Int0SetSenseControl(uint8 Copy_uint8Sense )
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <EXTI_uint8Int0SetSenseControl+0x6>
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorState = OK ;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_uint8Sense == EXTI_LOW_LEVEL_SENCE_CONTROL)
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	89 f4       	brne	.+34     	; 0x14fe <EXTI_uint8Int0SetSenseControl+0x38>
	{
		CLR_BIT(MCUCR,MCUCR_ISC00);
    14dc:	a5 e5       	ldi	r26, 0x55	; 85
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e5 e5       	ldi	r30, 0x55	; 85
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	8e 7f       	andi	r24, 0xFE	; 254
    14e8:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC01);
    14ea:	a5 e5       	ldi	r26, 0x55	; 85
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e5 e5       	ldi	r30, 0x55	; 85
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	8d 7f       	andi	r24, 0xFD	; 253
    14f6:	8c 93       	st	X, r24
		Local_uint8ErrorState = OK;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	3d c0       	rjmp	.+122    	; 0x1578 <EXTI_uint8Int0SetSenseControl+0xb2>
	}
	else if( Copy_uint8Sense == EXTI_ONCHANGE_SENCE_CONTROL)
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	82 30       	cpi	r24, 0x02	; 2
    1502:	89 f4       	brne	.+34     	; 0x1526 <EXTI_uint8Int0SetSenseControl+0x60>
	{
		CLR_BIT(MCUCR,MCUCR_ISC01);
    1504:	a5 e5       	ldi	r26, 0x55	; 85
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e5 e5       	ldi	r30, 0x55	; 85
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	8d 7f       	andi	r24, 0xFD	; 253
    1510:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC00);
    1512:	a5 e5       	ldi	r26, 0x55	; 85
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e5 e5       	ldi	r30, 0x55	; 85
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	81 60       	ori	r24, 0x01	; 1
    151e:	8c 93       	st	X, r24
		Local_uint8ErrorState = OK;
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	29 c0       	rjmp	.+82     	; 0x1578 <EXTI_uint8Int0SetSenseControl+0xb2>
	}else if(Copy_uint8Sense == EXTI_FALLING_EDGE_SENCE_CONTROL)
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	89 f4       	brne	.+34     	; 0x154e <EXTI_uint8Int0SetSenseControl+0x88>
	{
		SET_BIT(MCUCR,MCUCR_ISC01 );
    152c:	a5 e5       	ldi	r26, 0x55	; 85
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e5 e5       	ldi	r30, 0x55	; 85
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	82 60       	ori	r24, 0x02	; 2
    1538:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC00);
    153a:	a5 e5       	ldi	r26, 0x55	; 85
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e5 e5       	ldi	r30, 0x55	; 85
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	8e 7f       	andi	r24, 0xFE	; 254
    1546:	8c 93       	st	X, r24
		Local_uint8ErrorState = OK ;
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	15 c0       	rjmp	.+42     	; 0x1578 <EXTI_uint8Int0SetSenseControl+0xb2>
	}else if(Copy_uint8Sense == EXTI_RISING_EDGE_SENCE_CONTROL)
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	84 30       	cpi	r24, 0x04	; 4
    1552:	89 f4       	brne	.+34     	; 0x1576 <EXTI_uint8Int0SetSenseControl+0xb0>
	{
		SET_BIT(MCUCR,MCUCR_ISC01);
    1554:	a5 e5       	ldi	r26, 0x55	; 85
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e5 e5       	ldi	r30, 0x55	; 85
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	82 60       	ori	r24, 0x02	; 2
    1560:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC00);
    1562:	a5 e5       	ldi	r26, 0x55	; 85
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e5 e5       	ldi	r30, 0x55	; 85
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	81 60       	ori	r24, 0x01	; 1
    156e:	8c 93       	st	X, r24
		Local_uint8ErrorState = OK;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	01 c0       	rjmp	.+2      	; 0x1578 <EXTI_uint8Int0SetSenseControl+0xb2>
	}else
	{
		Local_uint8ErrorState =NOK ;
    1576:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_uint8ErrorState;
    1578:	89 81       	ldd	r24, Y+1	; 0x01
}
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <EXTI_uint8Int0SetCallBack>:



uint8 EXTI_uint8Int0SetCallBack(void(*Copy_pvInt0Func)(void))
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	00 d0       	rcall	.+0      	; 0x158a <EXTI_uint8Int0SetCallBack+0x6>
    158a:	0f 92       	push	r0
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	9b 83       	std	Y+3, r25	; 0x03
    1592:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorState = OK ;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvInt0Func != NULL)
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	9b 81       	ldd	r25, Y+3	; 0x03
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	39 f0       	breq	.+14     	; 0x15ae <EXTI_uint8Int0SetCallBack+0x2a>
	{

		EXTI_pvInt0Fun =Copy_pvInt0Func;
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	9b 81       	ldd	r25, Y+3	; 0x03
    15a4:	90 93 81 00 	sts	0x0081, r25
    15a8:	80 93 80 00 	sts	0x0080, r24
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <EXTI_uint8Int0SetCallBack+0x2e>

	}else
	{
		Local_uint8ErrorState =NULL_pointer ;
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_uint8ErrorState ;
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <EXTI_uint8Disable>:

uint8 EXTI_uint8Disable(uint8 Copy_IntID)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <EXTI_uint8Disable+0x6>
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorState = OK ;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	89 83       	std	Y+1, r24	; 0x01

	/*Check the user pass the correct Value*/
	if( (Copy_IntID == INT0) ||(Copy_IntID == INT0)||(Copy_IntID ==INT0))
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	86 30       	cpi	r24, 0x06	; 6
    15d4:	31 f0       	breq	.+12     	; 0x15e2 <EXTI_uint8Disable+0x22>
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	86 30       	cpi	r24, 0x06	; 6
    15da:	19 f0       	breq	.+6      	; 0x15e2 <EXTI_uint8Disable+0x22>
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	86 30       	cpi	r24, 0x06	; 6
    15e0:	a9 f4       	brne	.+42     	; 0x160c <EXTI_uint8Disable+0x4c>
	{
		/*Clear the required bit*/
		CLR_BIT(GICR,Copy_IntID);
    15e2:	ab e5       	ldi	r26, 0x5B	; 91
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	eb e5       	ldi	r30, 0x5B	; 91
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <EXTI_uint8Disable+0x40>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <EXTI_uint8Disable+0x3c>
    1604:	80 95       	com	r24
    1606:	84 23       	and	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	01 c0       	rjmp	.+2      	; 0x160e <EXTI_uint8Disable+0x4e>
	}else
	{
		Local_uint8ErrorState = NOK;
    160c:	19 82       	std	Y+1, r1	; 0x01
	}


	return Local_uint8ErrorState ;
    160e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <EXTI_uint8IntEnable>:
uint8 EXTI_uint8IntEnable(uint8 Copy_IntID )
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	00 d0       	rcall	.+0      	; 0x1620 <EXTI_uint8IntEnable+0x6>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8ErrorState = OK ;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	89 83       	std	Y+1, r24	; 0x01

		/*Check the user pass the correct Value*/
		if( (Copy_IntID == INT0) ||(Copy_IntID == INT0)||(Copy_IntID ==INT0))
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	86 30       	cpi	r24, 0x06	; 6
    162e:	31 f0       	breq	.+12     	; 0x163c <EXTI_uint8IntEnable+0x22>
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	86 30       	cpi	r24, 0x06	; 6
    1634:	19 f0       	breq	.+6      	; 0x163c <EXTI_uint8IntEnable+0x22>
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	86 30       	cpi	r24, 0x06	; 6
    163a:	a1 f4       	brne	.+40     	; 0x1664 <EXTI_uint8IntEnable+0x4a>
		{
			/*Clear the required bit*/
			SET_BIT(GICR,Copy_IntID);
    163c:	ab e5       	ldi	r26, 0x5B	; 91
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	eb e5       	ldi	r30, 0x5B	; 91
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 2e       	mov	r0, r18
    1654:	02 c0       	rjmp	.+4      	; 0x165a <EXTI_uint8IntEnable+0x40>
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	0a 94       	dec	r0
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <EXTI_uint8IntEnable+0x3c>
    165e:	84 2b       	or	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <EXTI_uint8IntEnable+0x4c>
		}else
		{
			Local_uint8ErrorState = NOK;
    1664:	19 82       	std	Y+1, r1	; 0x01
		}


		return Local_uint8ErrorState ;
    1666:	89 81       	ldd	r24, Y+1	; 0x01
}
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <__vector_1>:

/*ISR OF INT0*/
void __vector_1(void)__attribute__((signal));
void __vector_1(void)
{
    1672:	1f 92       	push	r1
    1674:	0f 92       	push	r0
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	0f 92       	push	r0
    167a:	11 24       	eor	r1, r1
    167c:	2f 93       	push	r18
    167e:	3f 93       	push	r19
    1680:	4f 93       	push	r20
    1682:	5f 93       	push	r21
    1684:	6f 93       	push	r22
    1686:	7f 93       	push	r23
    1688:	8f 93       	push	r24
    168a:	9f 93       	push	r25
    168c:	af 93       	push	r26
    168e:	bf 93       	push	r27
    1690:	ef 93       	push	r30
    1692:	ff 93       	push	r31
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Fun !=NULL)
    169c:	80 91 80 00 	lds	r24, 0x0080
    16a0:	90 91 81 00 	lds	r25, 0x0081
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	29 f0       	breq	.+10     	; 0x16b2 <__vector_1+0x40>
	{
		EXTI_pvInt0Fun();
    16a8:	e0 91 80 00 	lds	r30, 0x0080
    16ac:	f0 91 81 00 	lds	r31, 0x0081
    16b0:	09 95       	icall

	}
}
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	ff 91       	pop	r31
    16b8:	ef 91       	pop	r30
    16ba:	bf 91       	pop	r27
    16bc:	af 91       	pop	r26
    16be:	9f 91       	pop	r25
    16c0:	8f 91       	pop	r24
    16c2:	7f 91       	pop	r23
    16c4:	6f 91       	pop	r22
    16c6:	5f 91       	pop	r21
    16c8:	4f 91       	pop	r20
    16ca:	3f 91       	pop	r19
    16cc:	2f 91       	pop	r18
    16ce:	0f 90       	pop	r0
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	0f 90       	pop	r0
    16d4:	1f 90       	pop	r1
    16d6:	18 95       	reti

000016d8 <GIE_voidEnable>:
#include "BIT_MATH.h"

#include "GIE_interface.h"
#include "GIE_registers.h"
void GIE_voidEnable(void)
{
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    16e0:	af e5       	ldi	r26, 0x5F	; 95
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	ef e5       	ldi	r30, 0x5F	; 95
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	80 68       	ori	r24, 0x80	; 128
    16ec:	8c 93       	st	X, r24
}
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    16fc:	af e5       	ldi	r26, 0x5F	; 95
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	ef e5       	ldi	r30, 0x5F	; 95
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	8f 77       	andi	r24, 0x7F	; 127
    1708:	8c 93       	st	X, r24
}
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <ICU_SW>:
#include "ICU_SW.h"

uint16 PeriodTime_Ticks = 0 ;
uint16 ON_Ticks = 0 ;
void ICU_SW(void)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
	/*Initiate counter to know iam in which state of 3 states*/
	static uint8 Local_uint8Counter = 0 ;

	Local_uint8Counter++;
    1718:	80 91 86 00 	lds	r24, 0x0086
    171c:	8f 5f       	subi	r24, 0xFF	; 255
    171e:	80 93 86 00 	sts	0x0086, r24
	if(Local_uint8Counter == 1) /*First rising edge*/
    1722:	80 91 86 00 	lds	r24, 0x0086
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	29 f4       	brne	.+10     	; 0x1734 <ICU_SW+0x24>
	{
	/*Clear the timer @ the beginning*/
	TIMER1_voidSetTimerValue(0);
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <TIMER1_voidSetTimerValue>
    1732:	2b c0       	rjmp	.+86     	; 0x178a <ICU_SW+0x7a>
	}
	else if(Local_uint8Counter == 2) /*Second  rising edge*/
    1734:	80 91 86 00 	lds	r24, 0x0086
    1738:	82 30       	cpi	r24, 0x02	; 2
    173a:	51 f4       	brne	.+20     	; 0x1750 <ICU_SW+0x40>
	{
		/*Read Timer value to get the period time */
		PeriodTime_Ticks= TIMER1_GetTimerReading();
    173c:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <TIMER1_GetTimerReading>
    1740:	90 93 83 00 	sts	0x0083, r25
    1744:	80 93 82 00 	sts	0x0082, r24
		/*Change Trigger to Failing Edge*/
		EXTI_uint8Int0SetSenseControl(EXTI_FALLING_EDGE_SENCE_CONTROL);
    1748:	83 e0       	ldi	r24, 0x03	; 3
    174a:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <EXTI_uint8Int0SetSenseControl>
    174e:	1d c0       	rjmp	.+58     	; 0x178a <ICU_SW+0x7a>

	}
	else if(Local_uint8Counter == 3)
    1750:	80 91 86 00 	lds	r24, 0x0086
    1754:	83 30       	cpi	r24, 0x03	; 3
    1756:	c9 f4       	brne	.+50     	; 0x178a <ICU_SW+0x7a>
	{
		ON_Ticks = TIMER1_GetTimerReading();
    1758:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <TIMER1_GetTimerReading>
    175c:	90 93 85 00 	sts	0x0085, r25
    1760:	80 93 84 00 	sts	0x0084, r24
		ON_Ticks -= PeriodTime_Ticks ;
    1764:	20 91 84 00 	lds	r18, 0x0084
    1768:	30 91 85 00 	lds	r19, 0x0085
    176c:	80 91 82 00 	lds	r24, 0x0082
    1770:	90 91 83 00 	lds	r25, 0x0083
    1774:	a9 01       	movw	r20, r18
    1776:	48 1b       	sub	r20, r24
    1778:	59 0b       	sbc	r21, r25
    177a:	ca 01       	movw	r24, r20
    177c:	90 93 85 00 	sts	0x0085, r25
    1780:	80 93 84 00 	sts	0x0084, r24
		/*Disable INT0 */
	 	EXTI_uint8Disable(INT0);
    1784:	86 e0       	ldi	r24, 0x06	; 6
    1786:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <EXTI_uint8Disable>

	}


}
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <PORT_voidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_voidInit(void)
{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
	DDRA =PORTA_DIR ;
    1798:	ea e3       	ldi	r30, 0x3A	; 58
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	8f ef       	ldi	r24, 0xFF	; 255
    179e:	80 83       	st	Z, r24
	DDRB =PORTB_DIR  ;
    17a0:	e7 e3       	ldi	r30, 0x37	; 55
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	88 e0       	ldi	r24, 0x08	; 8
    17a6:	80 83       	st	Z, r24
	DDRC =PORTC_DIR ;
    17a8:	e4 e3       	ldi	r30, 0x34	; 52
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	87 e0       	ldi	r24, 0x07	; 7
    17ae:	80 83       	st	Z, r24
	DDRD =PORTD_DIR ;
    17b0:	e1 e3       	ldi	r30, 0x31	; 49
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	10 82       	st	Z, r1
	
	PORTA  = PORTA_INITIAL_VALUE;
    17b6:	eb e3       	ldi	r30, 0x3B	; 59
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	10 82       	st	Z, r1
	PORTB  = PORTB_INITIAL_VALUE ;
    17bc:	e8 e3       	ldi	r30, 0x38	; 56
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	10 82       	st	Z, r1
	PORTC  = PORTC_INITIAL_VALUE ;
    17c2:	e5 e3       	ldi	r30, 0x35	; 53
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	10 82       	st	Z, r1
	PORTD  = PORTD_INITIAL_VALUE  ;
    17c8:	e2 e3       	ldi	r30, 0x32	; 50
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	10 82       	st	Z, r1
}
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <TIMER0_voidInit>:
#include "TIMER_private.h"
#include "TIMER_config.h"


void TIMER0_voidInit(void)
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
	/*choose Fast PWM mode */
	SET_BIT(TCCR0,TCCR0_WGM00);
    17dc:	a3 e5       	ldi	r26, 0x53	; 83
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e3 e5       	ldi	r30, 0x53	; 83
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	80 64       	ori	r24, 0x40	; 64
    17e8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    17ea:	a3 e5       	ldi	r26, 0x53	; 83
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e3 e5       	ldi	r30, 0x53	; 83
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	88 60       	ori	r24, 0x08	; 8
    17f6:	8c 93       	st	X, r24
	
	/*Clear OC0 on compare match, set OC0 at TOP (non- inverted mode) */
		CLR_BIT(TCCR0,TCCR0_COM00);
    17f8:	a3 e5       	ldi	r26, 0x53	; 83
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e3 e5       	ldi	r30, 0x53	; 83
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	8f 7e       	andi	r24, 0xEF	; 239
    1804:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
    1806:	a3 e5       	ldi	r26, 0x53	; 83
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e3 e5       	ldi	r30, 0x53	; 83
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	80 62       	ori	r24, 0x20	; 32
    1812:	8c 93       	st	X, r24

	/*Define the timer clock , prescaler /8 */
	CLR_BIT(TCCR0,TCCR0_CS00);
    1814:	a3 e5       	ldi	r26, 0x53	; 83
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e3 e5       	ldi	r30, 0x53	; 83
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	8e 7f       	andi	r24, 0xFE	; 254
    1820:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    1822:	a3 e5       	ldi	r26, 0x53	; 83
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e3 e5       	ldi	r30, 0x53	; 83
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	82 60       	ori	r24, 0x02	; 2
    182e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    1830:	a3 e5       	ldi	r26, 0x53	; 83
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e3 e5       	ldi	r30, 0x53	; 83
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	8b 7f       	andi	r24, 0xFB	; 251
    183c:	8c 93       	st	X, r24
	
	/*SET the compare match value to 64 for duty cycle 25% */
	OCR0=COMPAREVALUE;
    183e:	ec e5       	ldi	r30, 0x5C	; 92
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 e4       	ldi	r24, 0x40	; 64
    1844:	80 83       	st	Z, r24
}
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <TIMER0_voidSetCompMatchValue>:

void TIMER0_voidSetCompMatchValue(uint8 Copy_uint8Value)
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	0f 92       	push	r0
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_uint8Value ;
    1858:	ec e5       	ldi	r30, 0x5C	; 92
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	80 83       	st	Z, r24
}
    1860:	0f 90       	pop	r0
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
	/*Initialize at normal Mode , prescaler /8 */
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    1870:	ae e4       	ldi	r26, 0x4E	; 78
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	ee e4       	ldi	r30, 0x4E	; 78
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	8e 7f       	andi	r24, 0xFE	; 254
    187c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    187e:	ae e4       	ldi	r26, 0x4E	; 78
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	ee e4       	ldi	r30, 0x4E	; 78
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	82 60       	ori	r24, 0x02	; 2
    188a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    188c:	ae e4       	ldi	r26, 0x4E	; 78
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	ee e4       	ldi	r30, 0x4E	; 78
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	8b 7f       	andi	r24, 0xFB	; 251
    1898:	8c 93       	st	X, r24
}
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <TIMER1_voidSetTimerValue>:

void TIMER1_voidSetTimerValue(uint16 Copy_uint16Value)
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <TIMER1_voidSetTimerValue+0x6>
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	9a 83       	std	Y+2, r25	; 0x02
    18ac:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_uint16Value ;
    18ae:	ec e4       	ldi	r30, 0x4C	; 76
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	9a 81       	ldd	r25, Y+2	; 0x02
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
}
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <TIMER1_GetTimerReading>:

uint16 TIMER1_GetTimerReading(void)
{
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
  return TCNT1;
    18cc:	ec e4       	ldi	r30, 0x4C	; 76
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	91 81       	ldd	r25, Z+1	; 0x01
}
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <main>:
// External variables to store the period time and ON time of the PWM signal
extern uint16 PeriodTime_Ticks;
extern uint16 ON_Ticks;

int main(void)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    // Initialize all configured I/O ports
    PORT_voidInit();
    18e2:	0e 94 c8 0b 	call	0x1790	; 0x1790 <PORT_voidInit>

    // Set up external interrupt INT0 to trigger the ICU function
    EXTI_uint8Int0SetCallBack(&ICU_SW);
    18e6:	88 e8       	ldi	r24, 0x88	; 136
    18e8:	9b e0       	ldi	r25, 0x0B	; 11
    18ea:	0e 94 c2 0a 	call	0x1584	; 0x1584 <EXTI_uint8Int0SetCallBack>
    EXTI_voidInt0Init();
    18ee:	0e 94 47 0a 	call	0x148e	; 0x148e <EXTI_voidInt0Init>

    // Initialize timers
    TIMER1_voidInit();  // Used to measure the input signal
    18f2:	0e 94 34 0c 	call	0x1868	; 0x1868 <TIMER1_voidInit>
    TIMER0_voidInit();  // Used to generate the PWM signal
    18f6:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <TIMER0_voidInit>

    // Enable global interrupts
    GIE_voidEnable();
    18fa:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <GIE_voidEnable>

    // Initialize the LCD display
    CLCD_voidInit();
    18fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidInit>

    while(1)
    {
        // Wait until both period time and ON time values are measured
        while((PeriodTime_Ticks == 0) && (ON_Ticks == 0));
    1902:	80 91 82 00 	lds	r24, 0x0082
    1906:	90 91 83 00 	lds	r25, 0x0083
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	31 f4       	brne	.+12     	; 0x191a <main+0x40>
    190e:	80 91 84 00 	lds	r24, 0x0084
    1912:	90 91 85 00 	lds	r25, 0x0085
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	a1 f3       	breq	.-24     	; 0x1902 <main+0x28>

        // Display the measured period time on the LCD
        CLCD_voidGoToXY(0,0);
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	60 e0       	ldi	r22, 0x00	; 0
    191e:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_voidGoToXY>
        CLCD_voidSendString("P_Ticks = ");
    1922:	80 e6       	ldi	r24, 0x60	; 96
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendString>
        CLCD_voidWriteNumber(PeriodTime_Ticks);
    192a:	80 91 82 00 	lds	r24, 0x0082
    192e:	90 91 83 00 	lds	r25, 0x0083
    1932:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidWriteNumber>

        // Display the measured ON time on the LCD
        CLCD_voidGoToXY(1,0);
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_voidGoToXY>
        CLCD_voidSendString("ON Ticks = ");
    193e:	8b e6       	ldi	r24, 0x6B	; 107
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendString>
        CLCD_voidWriteNumber(ON_Ticks);
    1946:	80 91 84 00 	lds	r24, 0x0084
    194a:	90 91 85 00 	lds	r25, 0x0085
    194e:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidWriteNumber>
    1952:	d7 cf       	rjmp	.-82     	; 0x1902 <main+0x28>

00001954 <__udivmodhi4>:
    1954:	aa 1b       	sub	r26, r26
    1956:	bb 1b       	sub	r27, r27
    1958:	51 e1       	ldi	r21, 0x11	; 17
    195a:	07 c0       	rjmp	.+14     	; 0x196a <__udivmodhi4_ep>

0000195c <__udivmodhi4_loop>:
    195c:	aa 1f       	adc	r26, r26
    195e:	bb 1f       	adc	r27, r27
    1960:	a6 17       	cp	r26, r22
    1962:	b7 07       	cpc	r27, r23
    1964:	10 f0       	brcs	.+4      	; 0x196a <__udivmodhi4_ep>
    1966:	a6 1b       	sub	r26, r22
    1968:	b7 0b       	sbc	r27, r23

0000196a <__udivmodhi4_ep>:
    196a:	88 1f       	adc	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	5a 95       	dec	r21
    1970:	a9 f7       	brne	.-22     	; 0x195c <__udivmodhi4_loop>
    1972:	80 95       	com	r24
    1974:	90 95       	com	r25
    1976:	bc 01       	movw	r22, r24
    1978:	cd 01       	movw	r24, r26
    197a:	08 95       	ret

0000197c <__prologue_saves__>:
    197c:	2f 92       	push	r2
    197e:	3f 92       	push	r3
    1980:	4f 92       	push	r4
    1982:	5f 92       	push	r5
    1984:	6f 92       	push	r6
    1986:	7f 92       	push	r7
    1988:	8f 92       	push	r8
    198a:	9f 92       	push	r9
    198c:	af 92       	push	r10
    198e:	bf 92       	push	r11
    1990:	cf 92       	push	r12
    1992:	df 92       	push	r13
    1994:	ef 92       	push	r14
    1996:	ff 92       	push	r15
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	ca 1b       	sub	r28, r26
    19a6:	db 0b       	sbc	r29, r27
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	09 94       	ijmp

000019b4 <__epilogue_restores__>:
    19b4:	2a 88       	ldd	r2, Y+18	; 0x12
    19b6:	39 88       	ldd	r3, Y+17	; 0x11
    19b8:	48 88       	ldd	r4, Y+16	; 0x10
    19ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    19bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    19be:	7d 84       	ldd	r7, Y+13	; 0x0d
    19c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    19c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    19c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    19c6:	b9 84       	ldd	r11, Y+9	; 0x09
    19c8:	c8 84       	ldd	r12, Y+8	; 0x08
    19ca:	df 80       	ldd	r13, Y+7	; 0x07
    19cc:	ee 80       	ldd	r14, Y+6	; 0x06
    19ce:	fd 80       	ldd	r15, Y+5	; 0x05
    19d0:	0c 81       	ldd	r16, Y+4	; 0x04
    19d2:	1b 81       	ldd	r17, Y+3	; 0x03
    19d4:	aa 81       	ldd	r26, Y+2	; 0x02
    19d6:	b9 81       	ldd	r27, Y+1	; 0x01
    19d8:	ce 0f       	add	r28, r30
    19da:	d1 1d       	adc	r29, r1
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	ed 01       	movw	r28, r26
    19e8:	08 95       	ret

000019ea <_exit>:
    19ea:	f8 94       	cli

000019ec <__stop_program>:
    19ec:	ff cf       	rjmp	.-2      	; 0x19ec <__stop_program>
